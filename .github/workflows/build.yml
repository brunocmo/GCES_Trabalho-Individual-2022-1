name: "Build CI"

on: [push, pull_request]
 

jobs:
  build:
    needs: [testBack, testFront]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build application
        run: docker-compose up -d

  testBack:

      runs-on: ubuntu-latest
      
      services:
        postgres:
          image: postgres:latest
          env:
            POSTGRES_DB: ${{secrets.POSTGRES_DB}}        
            POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
            POSTGRES_USER: ${{secrets.POSTGRES_USER}}
          ports:
            - 5432:5432
          # Set health checks to wait until postgres has started
          options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5


      steps:
        - uses: actions/checkout@v2
        - name: Install python
          working-directory: ./library_back
          run: pip install -r requirements.txt
        - name: Create env file
          working-directory: ./library_back
          run: |
            touch .env
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> .env
            echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> .env
            cat .env
        - name: Run test
          working-directory: ./library_back
          run: python3 manage.py test

  testFront:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
        - name: Install react
          working-directory: ./library_front
          run: npm install 
        - name: Run test
          working-directory: ./library_front
          run: npm run test

